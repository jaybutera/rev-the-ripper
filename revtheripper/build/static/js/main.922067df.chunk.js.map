{"version":3,"sources":["ChooseVideo.js","Transcribe.js","Finish.js","App.js","serviceWorker.js","index.js"],"names":["ChooseVideo","react_default","a","createElement","Fragment","Typography_default","variant","gutterBottom","Grid_default","container","spacing","item","xs","accept","style","display","id","multiple","type","htmlFor","Button_default","component","Transcribe","CircularProgress_default","Finish","steps","App","state","activeStep","handleNext","_this","setState","handleBack","handleReset","fetch","method","body","JSON","stringify","media_url","metadata","headers","Content-Type","Authorization","Access-Control-Allow-Origin","then","res","json","response","console","log","catch","error","classes","this","props","CssBaseline_default","AppBar_default","position","color","className","appBar","Toolbar_default","noWrap","layout","Paper_default","paper","align","Stepper_default","stepper","map","label","Step_default","key","StepLabel_default","length","step","src_ChooseVideo","src_Transcribe","src_Finish","Error","getStepContent","buttons","onClick","button","React","Component","withStyles","theme","Object","defineProperty","width","marginLeft","unit","marginRight","breakpoints","up","marginTop","marginBottom","padding","concat","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.922067df.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nfunction ChooseVideo() {\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom>\n                Choose video\n            </Typography>\n            <Grid container spacing={24}>\n                <Grid item xs={12}>\n                    <input\n                        accept=\"image/*\"\n                        style={{ display: 'none' }}\n                        id=\"button-file\"\n                        multiple\n                        type=\"file\"\n                    />\n                    <label htmlFor=\"button-file\">\n                        <Button variant=\"contained\" component=\"span\">\n                            Upload\n                        </Button>\n                    </label>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nexport default ChooseVideo;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction Transcribe() {\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom>\n\n            </Typography>\n            <Grid container spacing={24}>\n                <Grid item xs={12}>\n                <CircularProgress/>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nexport default Transcribe;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Finish() {\n    return (\n        <React.Fragment>\n            <Typography variant=\"h6\" gutterBottom>\n                Finished!\n            </Typography>\n            <Grid container spacing={24}>\n                <Grid item xs={12}>\n                </Grid>\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nexport default Finish;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ChooseVideo from './ChooseVideo';\nimport Transcribe from './Transcribe';\nimport Finish from './Finish';\n\n\nconst styles = theme => ({\n    appBar: {\n        position: 'relative',\n    },\n    layout: {\n        width: 'auto',\n        marginLeft: theme.spacing.unit * 2,\n        marginRight: theme.spacing.unit * 2,\n        [theme.breakpoints.up(600 + theme.spacing.unit * 2 * 2)]: {\n            width: 600,\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n    },\n    paper: {\n        marginTop: theme.spacing.unit * 3,\n        marginBottom: theme.spacing.unit * 3,\n        padding: theme.spacing.unit * 2,\n        [theme.breakpoints.up(600 + theme.spacing.unit * 3 * 2)]: {\n            marginTop: theme.spacing.unit * 6,\n            marginBottom: theme.spacing.unit * 6,\n            padding: theme.spacing.unit * 3,\n        },\n    },\n    stepper: {\n        padding: `${theme.spacing.unit * 3}px 0 ${theme.spacing.unit * 5}px`,\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    button: {\n        marginTop: theme.spacing.unit * 3,\n        marginLeft: theme.spacing.unit,\n    },\n});\n\nconst steps = ['Choose video file', 'Transcribe', 'Finish'];\n\nfunction getStepContent(step) {\n    switch (step) {\n        case 0:\n            return <ChooseVideo/>;\n        case 1:\n            return <Transcribe/>;\n        case 2:\n            return <Finish/>;\n        default:\n            throw new Error('Unknown step');\n    }\n}\n\nclass App extends React.Component {\n    state = {\n        activeStep: 0,\n    };\n\n    componentDidMount() {\n        const apiKey = '01cGemVQHqb9wpf1Hq1KP_UDFGbp4MkET0e7uGBqtJ49BoENA-1QWQ4eGggqwI88MPgqoNdbCI-q5iDN5CJ2AiM-o4yI0';\n        const apiURL = 'https://api.rev.ai/revspeech/v1beta/jobs';\n        const stuffs = {\n            \"media_url\": \"https://support.rev.com/hc/en-us/article_attachments/200043975/FTC_Sample_1_-_Single.mp3\",\n            \"metadata\": \"This is a sample submit jobs option\",\n        };\n\n\n        fetch(apiURL, {\n            method: 'POST', // or 'PUT'\n            body: JSON.stringify(stuffs), // data can be `string` or {object}!\n            headers: {\n                'Content-Type': 'multipart/form-data',\n                'Authorization': apiKey,\n                'Access-Control-Allow-Origin': '*'\n            }\n        }).then(res => res.json())\n            .then(response => console.log('Success:', JSON.stringify(response)))\n            .catch(error => console.error('Error:', error));\n    }\n\n    handleNext = () => {\n        this.setState(state => ({\n            activeStep: state.activeStep + 1,\n        }));\n    };\n\n    handleBack = () => {\n        this.setState(state => ({\n            activeStep: state.activeStep - 1,\n        }));\n    };\n\n    handleReset = () => {\n        this.setState({\n            activeStep: 0,\n        });\n    };\n\n    render() {\n        const {classes} = this.props;\n        const {activeStep} = this.state;\n\n        //curl -X POST \"https://api.rev.ai/revspeech/v1beta/jobs\" -H \"Authorization: Bearer <api_key>\" -H \"Content-Type: multipart/form-data\" -F \"media=@/path/to/media_file.mp3;type=audio/mp3\" -F \"options={\\\"metadata\\\":\\\"This is a sample submit jobs option for multipart\\\"}\"\n\n        return (\n            <React.Fragment>\n                <CssBaseline/>\n                <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                            Rev The Ripper\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <main className={classes.layout}>\n                    <Paper className={classes.paper}>\n                        <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n                            Create Transcribed Blog\n                        </Typography>\n                        <Stepper activeStep={activeStep} className={classes.stepper}>\n                            {steps.map(label => (\n                                <Step key={label}>\n                                    <StepLabel>{label}</StepLabel>\n                                </Step>\n                            ))}\n                        </Stepper>\n                        <React.Fragment>\n                            {activeStep === steps.length ? (\n                                <React.Fragment>\n                                </React.Fragment>\n                            ) : (\n                                <React.Fragment>\n                                    {getStepContent(activeStep)}\n                                    <div className={classes.buttons}>\n                                        {activeStep !== 0 && (\n                                            <Button onClick={this.handleBack} className={classes.button}>\n                                                Back\n                                            </Button>\n                                        )}\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={this.handleNext}\n                                            className={classes.button}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                        </Button>\n                                    </div>\n                                </React.Fragment>\n                            )}\n                        </React.Fragment>\n                    </Paper>\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nApp.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}